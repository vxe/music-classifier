# -*- mode:org -*-
#+TITLE: music classifier
#+STARTUP: indent
#+OPTIONS: toc:nil

** namespace
#+BEGIN_SRC clojure :tangle core.clj
(ns music-classifier.core
  (:require [clj-http.client])
  (:use [com.rpl.specter]
        [clojure.core.logic :exclude [pred]]
        [clojure.java.shell :only [sh]]))

#+END_SRC
** core application state
*** TODO number of tracks - generate this dynamically
#+BEGIN_SRC clojure :tangle core.clj
  (def track-count 220)
#+END_SRC

*** TODO offsets to download data incrementally - generate this dynamicall from track count
    this is because Spotify only lets you download 50 songs at a time, this is used to batch the query

    basically if you know the max count you just need to find the closest multiple of 50, then subtract 50 from that sequentially until at zero
#+BEGIN_SRC clojure :tangle core.clj
  (def offsets [0 50 100 150 200 track-count])
#+END_SRC
*** api token
 #+BEGIN_SRC clojure :tangle core.clj
  (def token (atom ""))
 #+END_SRC
** third party data fetch
*** all track data
 #+BEGIN_SRC clojure :tangle core.clj
  (defn get-all-library-tracks []
    (flatten
     (distinct
      (for [offset offsets]
        (select [ALL :track]
                (second
                 (second
                  (cheshire.core/parse-string
                   (:out
                    (sh "curl"
                        "-s"
                        "-H"
                        @token
                        (str "https://api.spotify.com/v1/me/tracks?limit=50&offset=" offset))) true))))))))
 #+END_SRC
*** all track ids
 #+BEGIN_SRC clojure :tangle core.clj
  (defn get-all-library-track-ids []
    (flatten
     (distinct
      (for [offset offsets]
        (select [ALL :track :id]
                (second
                 (second
                  (cheshire.core/parse-string
                   (:out
                    (sh "curl"
                        "-s"
                        "-H"
                        @token
                        (str "https://api.spotify.com/v1/me/tracks?limit=50&offset=" offset))) true))))))))
 #+END_SRC
*** all track names
 #+BEGIN_SRC clojure :tangle core.clj
  (defn get-all-library-track-names []
    (flatten
     (distinct
      (for [offset offsets]
        (select [ALL :track :name]
                (second
                 (second
                  (cheshire.core/parse-string
                   (:out
                    (sh "curl"
                        "-s"
                        "-H"
                        @token
                        (str "https://api.spotify.com/v1/me/tracks?limit=50&offset=" offset))) true))))))))
 #+END_SRC
** internal data structures
*** track id to name mapping
    #+BEGIN_SRC clojure :tangle core.clj
      (def track-id-name-map (atom {}))

      (defn build-track-id-map []
        (for [track (get-all-library-tracks)]
          (cond (= nil (:id track)) (prn (str  "id " (:id track) " is missing" ))
                (= nil (:name track)) (prn (str "track name " (:name track) " is missing"))
                :else
                (swap! track-id-name-map assoc (keyword (:id track))  (:name track)))))

    #+END_SRC
*** track id to key mapping
**** pitch class to key mapping
 #+BEGIN_SRC clojure :tangle core.clj
 (def pitch-classes [:c :c# :d :d# :e :f :f# :g :g# :a :a# :b])
 #+END_SRC
**** key to pitch class mapping
 #+BEGIN_SRC clojure :tangle core.clj
 (def pitch-keys {:c 0 :c# 1 :d 2 :d# 3 :e 4 :f 5 :f# 6 :g 7 :g# 8 :a 9 :a# 10 :b 11})
 #+END_SRC
*** audio features for all tracks in currents user's library
#+BEGIN_SRC clojure :tangle core.clj
  (def analyzed-tracks (agent {}))

  (defn get-audio-features-by-track-id [id]
    (cheshire.core/parse-string
     (:out
      (sh "curl"
          "-s"
          "-H"
          @token
          (str "https://api.spotify.com/v1/audio-features/" id))) true))

  (defn analyze-library []
    (pmap (fn [id]
            (if (or (:error ((keyword id) @analyzed-tracks))
                    (= nil ((keyword id) @analyzed-tracks)))
              (do
                (prn id " is nil")
                (future (send analyzed-tracks assoc (keyword id) (get-audio-features-by-track-id id))))))
          (select [ALL :id] (get-all-library-tracks))))

#+END_SRC
*** TODO song to artist mapping
** searching
*** track name by id
 #+BEGIN_SRC clojure :tangle core.clj
    (defn lookup-track-name-by-id [id]
      (let [name ((keyword id) @track-id-name-map)]
        (if (= nil name)
          (prn id " is mising")
          name)))
 #+END_SRC
*** track id by name
 #+BEGIN_SRC clojure :tangle core.clj
    (defn lookup-track-id-by-name [name]
      (remove nil? (for [[k v] @track-id-name-map]
                     (if (= name v)
                       k))))
 #+END_SRC
*** track id by regex
 #+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-id-by-regex [regex]
     (remove nil? (for [[k v] @track-id-name-map]
                    (let [track-match (re-matches regex v)]
                      (if track-match
                        k
                        (build-track-id-map))))))
 #+END_SRC
*** get audio features by track name
    #+BEGIN_SRC clojure :tangle core.clj
        (defn lookup-audio-features-by-track-name [name]
      ((first (lookup-track-id-by-name name)) @analyzed-tracks))

    #+END_SRC
*** get audio features by regex
#+BEGIN_SRC clojure :tangle core.clj
  ;; (defn lookup-audio-features-by-track-regex [title]
  ;;   (let [track (lookup-track-id-by-regex title)]
  ;;     (cond (list? ((first track) @analyzed-tracks)) (prn track))
  ;;     :else
  ;;         ((first track) @analyzed-tracks)
  ;;     ))


      (defn lookup-audio-features-by-track-regex [title]
        ((first (lookup-track-id-by-regex title)) @analyzed-tracks))
#+END_SRC
*** track by feature and value
#+BEGIN_SRC 
   (defn lookup-track-by-feature [feature comparison value]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [(keyword feature)] v)) value)
                      (:id v)))))

#+END_SRC
*** track by valence 
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-valence [comparison valence]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:valence] v)) valence)
                      (:id v)
                      (prn k)
                      ))))

#+END_SRC
*** track by loudness
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-loudness [comparison loudness]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:loudness] v)) loudness)
                      (:id v)))))

#+END_SRC
*** track by musical key
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-key [comparison key]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:key] v)) key)
                      (:id v)))))

#+END_SRC
*** track by duration
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-duration [comparison duration]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:duration] v)) duration)
                      (:id v)))))

#+END_SRC
*** track by instrumentalness
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-instrumentalness [comparison instrumentalness]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:instrumentalness] v)) instrumentalness)
                      (:id v)))))

#+END_SRC
*** track by major or minor mode
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-mode [comparison mode]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:mode] v)) mode)
                      (:id v)))))

#+END_SRC
*** track by energy
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-energy [comparison energy]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:energy] v)) energy)
                      (:id v)))))

#+END_SRC
*** track by speechiness
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-speechiness [comparison speechiness]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:speechiness] v)) speechiness)
                      (:id v)))))

#+END_SRC
*** track by time signature
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-time_signature [comparison time_signature]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:time_signature] v)) time_signature)
                      (:id v)))))

#+END_SRC
*** track by liveness
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-liveness [comparison liveness]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:liveness] v)) liveness)
                      (:id v)))))

#+END_SRC
*** track by danceability
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-danceability [comparison danceability]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:danceability] v)) danceability)
                      (:id v)))))

#+END_SRC
*** track by tempo
#+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-tempo [comparison tempo]
     (remove nil? (for [[k v] @analyzed-tracks]
                    (if (comparison (first (select [:tempo] v)) tempo)
                      (:id v)))))

#+END_SRC
*** track by acousticness
 #+BEGIN_SRC clojure :tangle core.clj
   (defn lookup-track-by-acousticness [comparison acousticness]
     (remove nil? (for [[k v] @analyzed-tracks]
                   (if (comparison (first (select [:acousticness] v)) acousticness)
                     (:id v)))))




 #+END_SRC
** data persistence 
*** TODO add new track records
*** TODO load track records into memory
** cli
*** login
#+BEGIN_SRC clojure :tangle core.clj
  (defn login []
    (let
        [key (do (println "What's yourkey: ") (flush) (read-line))]
      (do
        (count (build-track-id-map))
        (count (analyze-library))
        (reset! token (str "Authorization: Bearer " key)))))

#+END_SRC
** debug
#+BEGIN_SRC clojure :tangle core.clj
   (defn debug:print-nil-tracks []
     (clojure.pprint/pprint (select [ALL ALL #(= nil (:valence %))]  @analyzed-tracks)))


   (defn debug:find-nil-tracks []
     (select [ALL ALL #(= nil (:valence %))]  @analyzed-tracks))


#+END_SRC
